name: home-server

services:
  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    volumes:
      # kics-scan ignore-line
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - TZ=${TIMEZONE}
    ports:
      # kics-scan ignore-line
      - '${HOST_IP}:3000:3000'
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  home-assistant:
    image: homeassistant/home-assistant:2025.2.5
    container_name: home-assistant
    volumes:
      - ${HOME_ASSISTANT_CONFIGURATION_DIRECTORY}:/config
      - ../home-server-configuration/home-assistant/configuration.yaml:/config/configuration.yaml
      - ../home-server-configuration/home-assistant/automations.yaml:/config/automations.yaml
    environment:
      - TZ=${TIMEZONE}
    ports:
      # kics-scan ignore-line
      - '${HOST_IP}:8123:8123'
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  momomo:
    image: alexmikhalochkin/momomo-worker:main
    container_name: momomo
    volumes:
      - ../home-server-configuration/momomo/application.yaml:/config/application.yaml
    environment:
      - TZ=${TIMEZONE}
    ports:
      - '8081:8080'
    command: --spring.config.location=/config/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  mosquitto:
    image: eclipse-mosquitto:2.0.20
    container_name: mosquitto
    volumes:
      - ../home-server-configuration/mosquitto/certs:/etc/mosquitto/certs
      - ../home-server-configuration/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    environment:
      - TZ=${TIMEZONE}
    ports:
      - '1883:1883'
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "mosquitto_sub -h localhost -t '#' -C 1 || exit 1" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    user: 1000:1000
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  node-exporter:
    image: prom/node-exporter:v1.9.0
    container_name: node-exporter
    volumes:
      # kics-scan ignore-line
      - /:/host:ro,rslave
    environment:
      - TZ=${TIMEZONE}
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped
    cap_drop:
      - ALL
    pid: host
    security_opt:
      - no-new-privileges:true

  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:2.14.7
    container_name: paperless
    depends_on:
      - postgres
      - redis
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - ../home-server-configuration/export:/usr/src/paperless/export
      - ../home-server-configuration/consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBHOST: postgres
      PAPERLESS_ADMIN_USER: admin
      PAPERLESS_ADMIN_PASSWORD: admin
    ports:
      - '8000:8000'
    restart: unless-stopped
    profiles:
      - paperless

  plex:
    image: linuxserver/plex:1.41.4
    container_name: plex
    volumes:
      - ${PLEX_CONFIG_DIRECTORY}/config:/config
      - ${PLEX_CONTENT_DIRECTORY}/content:/content
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - VERSION=docker
    network_mode: host
    restart: unless-stopped
    devices:
      - /dev/dri:/dev/dri
    security_opt:
      - no-new-privileges:true

  postgres:
    image: docker.io/library/postgres:17
    container_name: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    restart: unless-stopped
    profiles:
      - paperless

  prometheus:
    image: prom/prometheus:v3.2.1
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # kics-scan ignore-line
      - prometheus-data:/prometheus
    environment:
      - TZ=${TIMEZONE}
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/metrics || exit 1"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  redis:
    image: docker.io/library/redis:7
    container_name: redis
    volumes:
      - redisdata:/data
    restart: unless-stopped
    profiles:
      - paperless

  zigbee2mqtt:
    image: koenkk/zigbee2mqtt:2.1.1
    container_name: zigbee2mqtt
    volumes:
      - ../home-server-configuration/zigbee2mqtt:/app/data
    environment:
      - TZ=${TIMEZONE}
    ports:
      # kics-scan ignore-line
      - '${HOST_IP}:8080:8080'
    restart: unless-stopped
    user: 1000:1000
    cap_drop:
      - ALL
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    group_add:
      - dialout
    security_opt:
      - no-new-privileges:true

volumes:
  grafana-data:
  prometheus-data:
  data:
  media:
  pgdata:
  redisdata:
